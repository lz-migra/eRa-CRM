(function () {
  'use strict';

  // ‚ÑπÔ∏è INFORMACI√ìN DEL SCRIPT
  const nombreScript = '[Mercado üõí]';
  const tipoScript = 'Escalamiento';

  // üö´ Evitar cache
  const timestamp = '?nocache=' + Date.now();

  // üîÅ Funci√≥n para cargar scripts remotos
  function cargarYEjecutarScript(url, callback) {
    console.log(`${nombreScript} üîÑ Cargando script desde: ${url}`);
    fetch(url)
      .then(response => {
        if (!response.ok) throw new Error(`Estado: ${response.status}`);
        return response.text();
      })
      .then(code => {
        try {
          new Function(code)();
          console.log(`${nombreScript} ‚úÖ Script ejecutado: ${url}`);
          if (typeof callback === 'function') callback();
        } catch (e) {
          console.error(`${nombreScript} ‚ùå Error al ejecutar script (${url}):`, e);
        }
      })
      .catch(error => {
        console.error(`${nombreScript} ‚ùå Error al cargar el script (${url}):`, error);
      });
  }

  // üîÉ Ejecutar en cadena los m√≥dulos de Mercado
  cargarYEjecutarScript(
    `https://raw.githubusercontent.com/lz-migra/eRa-CRM/refs/heads/main/Project_eRa/BackOffice/Resources/IdentificadorHTML.js${timestamp}`,
    function () {
      cargarYEjecutarScript(
        `https://raw.githubusercontent.com/lz-migra/eRa-CRM/refs/heads/main/Project_eRa/BackOffice/Resources/OrdenExtractor.js${timestamp}`,
        function () {

          // ‚è≥ Esperar que se generen los datos
          setTimeout(() => {
            const datos = window.datosExtraidos;

            if (!datos) {
              alert(nombreScript + '\n\n‚ùå Error: "datosExtraidos" no est√° definido.');
              return;
            }

            // üß∑ Extraer campos necesarios
            const {
              orden,
              cuenta,
              total,
              creado,
              fechaProgramada,
              nombre,
              telefono,
              direccion,
              negocio
            } = datos;

            // ‚úÖ Resumir direcci√≥n
            function resuDireccion(texto) {
              const match = texto.match(/(?:[^,]*,){2}\s*(.*)$/);
              return match ? match[1].trim() : texto;
            }

            // ‚úÖ Resumir fecha
            function resuFecha(texto) {
              const match = texto.match(/\d{4}-\d{2}-\d{2}/);
              return match ? match[0] : texto;
            }

            const direccionResumida = resuDireccion(direccion);
            const fechaResumida = resuFecha(creado);

            // üìã Crear plantilla con los datos
            const resultadoalert = `
üõí Orden de Mercado
=========================

üÜî Orden Nro. ${orden} (üìÖ ${fechaResumida})
üë®‚Äçüíº ${nombre} | üìû ${telefono}
üìç ${direccionResumida}
üè™ ${negocio}
üóìÔ∏è Fecha programada: ${fechaProgramada}
`.trim();

            const resultado = `
Orden Nro. ${orden} (${fechaResumida})
${nombre} | ${telefono}
${direccionResumida}
${negocio}
Fecha programada: ${fechaProgramada}
`.trim();

            // üìã Copiar al portapapeles
            navigator.clipboard.writeText(resultado).then(() => {
              console.log(nombreScript + ' ‚úÖ Informaci√≥n copiada al portapapeles:', resultado);
              alert(
                nombreScript + '\n\n' +
                'üìã ¬°Todos los datos fueron copiados al portapapeles! üìã\n' +
                '‚úÖ ' + tipoScript + ' generado con √©xito ‚úÖ\n\n' +
                resultadoalert
              );

              // üßπ Limpiar variables globales
              delete window.datosExtraidos;
              delete window.bloqueHTMLCapturado;
            }).catch((err) => {
              console.error(nombreScript + ' ‚ùå Error al copiar al portapapeles:', err);
            });

          }, 600); // ‚è±Ô∏è Espera para asegurar ejecuci√≥n de m√≥dulos
        }
      );
    }
  );
})();
