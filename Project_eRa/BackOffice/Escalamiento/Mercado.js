(function () {
  'use strict';

  // ‚ÑπÔ∏è INFORMACI√ìN DEL SCRIPT
  const nombreScript = '[Mercado üõí]';
  const tipoScript = 'Escalamiento';

  // üö´ Evitar cache
  const timestamp = '?nocache=' + Date.now();

  // üîÅ Funci√≥n para cargar scripts remotos
  function cargarYEjecutarScript(url, callback) {
    console.log(`${nombreScript} üîÑ Cargando script desde: ${url}`);
    fetch(url)
      .then(response => {
        if (!response.ok) throw new Error(`Estado: ${response.status}`);
        return response.text();
      })
      .then(code => {
        try {
          new Function(code)();
          console.log(`${nombreScript} ‚úÖ Script ejecutado: ${url}`);
          if (typeof callback === 'function') callback();
        } catch (e) {
          console.error(`${nombreScript} ‚ùå Error al ejecutar script (${url}):`, e);
        }
      })
      .catch(error => {
        console.error(`${nombreScript} ‚ùå Error al cargar el script (${url}):`, error);
      });
  }

  // üîÉ Ejecutar en cadena los m√≥dulos de Mercado
  cargarYEjecutarScript(`https://raw.githubusercontent.com/lz-migra/eRa-CRM/refs/heads/main/Project_eRa/BackOffice/Resources/IdentificadorHTML.js${timestamp}`, function () {
    cargarYEjecutarScript(`https://raw.githubusercontent.com/lz-migra/eRa-CRM/refs/heads/main/Project_eRa/BackOffice/Resources/OrdenExtractor.js${timestamp}`, function () {

      setTimeout(() => {
        const datos = window.datosExtraidos;

        if (!datos) {
          alert(nombreScript + '\n\n‚ùå Error: "datosExtraidos" no est√° definido.');
          return;
        }

        // üß∑ Extraer campos necesarios
        const { orden, cuenta, total, creado, fechaProgramada, nombre, telefono, direccion, negocio } = datos;

        // üìå Ahora cargamos el modal de Canal & Solicitud
        cargarYEjecutarScript('https://raw.githubusercontent.com/lz-migra/eRa-CRM/refs/heads/main/Project_eRa/BackOffice/Resources/Canal%26Solicitud.js', function () {
          // ‚ö° Esperamos a que el usuario seleccione Canal y Solicitud
          const esperarCanalSolicitud = setInterval(() => {
            if (window.CanalSeleccionado !== undefined && window.SolicitudIngresada !== undefined) {
              clearInterval(esperarCanalSolicitud);

              // üìã Crear plantilla con los datos y los valores seleccionados
              const resultadoalert = `
üõí Orden de Mercado
=========================

üÜî Nro de orden: ${orden}
üë§ ID cliente: ${cuenta}
üéß Canal: ${window.CanalSeleccionado}
üìù Solicitud: ${window.SolicitudIngresada || "(vac√≠o)"}
`.trim();

              const resultado = `
ID cliente: ${cuenta}
Nro de orden: ${orden}
Canal: ${window.CanalSeleccionado}
Solicitud: ${window.SolicitudIngresada || ""}
`.trim();

              // üìã Copiar al portapapeles
              navigator.clipboard.writeText(resultado).then(() => {
                console.log(nombreScript + ' ‚úÖ Informaci√≥n copiada al portapapeles:', resultado);
                alert(
                  nombreScript + '\n\n' +
                  'üìã ¬°Todos los datos fueron copiados al portapapeles! üìã\n' +
                  '‚úÖ ' + tipoScript + ' generado con √©xito ‚úÖ\n\n' +
                  resultadoalert
                );

                // üßπ Limpiar variables globales
          delete window.datosExtraidos;
          delete window.bloqueElemento;
          delete window.datosPanel;
          delete window.bloqueHTMLCapturado;
                delete window.CanalSeleccionado;
                delete window.SolicitudIngresada;
              }).catch(err => {
                console.error(nombreScript + ' ‚ùå Error al copiar al portapapeles:', err);
              });
            }
          }, 200);

        });

      }, 600); // ‚è±Ô∏è Espera para asegurar ejecuci√≥n de m√≥dulos
    });
  });

})();
