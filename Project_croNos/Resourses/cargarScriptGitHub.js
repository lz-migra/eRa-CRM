//============= Descripcion =============
// üì¶ Esta funci√≥n permite cargar y ejecutar din√°micamente un script JS desde GitHub (o cualquier URL).
// üîÑ Agrega un par√°metro ?nocache=timestamp para evitar que el navegador use una versi√≥n en cach√©.
// ‚úÖ Para usarla: window.cargarScriptGitHub("https://tudominio.github.io/archivo.js")
// üß† El script remoto se descarga, se eval√∫a con Function(), y se ejecuta en el entorno actual.
// ‚ö†Ô∏è Si hay un error de red o en la ejecuci√≥n, se muestra en consola y en una alerta.
// üß† Muestra en consola el nombre del archivo cargado.
//============= Descripcion =============

window.cargarScriptGitHub = function (url) {
  const timestamp = Date.now();                      // üïí Usado para evitar cach√©
  const scriptUrl = `${url}?nocache=${timestamp}`;   // üîÅ URL con timestamp

  // üß† Extraemos el nombre del archivo desde la URL
  const nombreArchivo = url.split("/").pop().split("?")[0];

  console.log(`üì° Cargando script desde: ${scriptUrl}`);

  fetch(scriptUrl)
    .then(response => {
      if (!response.ok) throw new Error(`Estado: ${response.status}`);
      return response.text();
    })
    .then(code => {
      try {
        new Function(code)(); // üß† Ejecutar el script
        console.log(`‚úÖ Script ejecutado con √©xito: ${nombreArchivo}`);
      } catch (e) {
        console.error('‚ùå Error al ejecutar el script:', e);
      }
    })
    .catch(error => {
      console.error('‚ö†Ô∏è Error al cargar el script:', error);
    });
};
